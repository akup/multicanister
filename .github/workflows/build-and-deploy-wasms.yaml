name: Build and Deploy IC canisters

on:
  push:
    branches: [ main, dev-* ]
    paths:
      - 'canisters/**'
      - '.github/workflows/build-and-deploy-wasms.yaml'
  pull_request:
    branches: [ main ]
    paths:
      - 'canisters/**'
      - '.github/workflows/build-and-deploy-wasms.yaml'
  workflow_dispatch:
    inputs:
      application:
        description: 'Application to deploy (leave empty for all)'
        required: false
        type: string
        default: ''
        options:
          - pocket-ic-core
          - test-app

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}


jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown

      - name: Cache Rust targets
        uses: actions/cache@v4
        with:
          path: |
            ~/.rustup/toolchains/*/lib/rustlib/wasm32-unknown-unknown
            ~/.cargo/bin
            ~/.cargo/registry/index/*
            ~/.cargo/registry/cache/*
            ~/.cargo/git/db/*
          key: ${{ runner.os }}-rust-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-rust-

      # Fallback: Manual Rust target installation if actions-rs fails
      - name: Install wasm32 target manually
        if: failure()
        run: |
          rustup target add wasm32-unknown-unknown
          rustup show

      - name: Get release info
        id: release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Get latest release info
          RELEASE_INFO=$(gh api repos/${{ github.repository }}/releases/latest)
          RELEASE_ID=$(echo "$RELEASE_INFO" | jq -r '.id')
          RELEASE_TAG=$(echo "$RELEASE_INFO" | jq -r '.tag_name')
          RELEASE_SHA=$(echo "$RELEASE_INFO" | jq -r '.target_commitish')
          
          echo "release_id=$RELEASE_ID" >> $GITHUB_OUTPUT
          echo "release_tag=$RELEASE_TAG" >> $GITHUB_OUTPUT
          echo "release_sha=$RELEASE_SHA" >> $GITHUB_OUTPUT
          
          echo "Latest release: $RELEASE_TAG (SHA: $RELEASE_SHA)"

      - name: Download ICR CLI or use cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.local/bin
            icr-cli-cache
          key: icr-cli-${{ steps.release.outputs.release_tag }}
          restore-keys: |
            icr-cli-

      - name: Download ICR CLI if not cached
        if: steps.cache.outputs.cache-hit != 'true'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          mkdir -p ~/.local/bin
          cd ~/.local/bin
          
          # Get the asset ID for the Linux binary
          ASSET_ID=$(gh api repos/${{ github.repository }}/releases/tags/${{ steps.release.outputs.release_tag }} \
            --jq '.assets[] | select(.name=="icr-cli-linux") | .id')
          
          echo "Downloading asset ID: $ASSET_ID"
          
          # Download using the asset API (more reliable for private repos)
          curl -L \
            -H "Authorization: token ${{ github.token }}" \
            -H "Accept: application/octet-stream" \
            -o icr-cli \
            "https://api.github.com/repos/${{ github.repository }}/releases/assets/$ASSET_ID"
          
          # Make it executable
          chmod +x icr-cli
          
          # Verify download
          ./icr-cli --version || echo "ICR CLI downloaded successfully"
          
          # Cache the downloaded binary
          echo "ICR CLI cached for future use"

      - name: Run icr-cli
        shell: bash
        env:
          POCKET_IC_CORE_URL: http://dev.service.pic.mc-ops.tech/
          PIC_GATEWAY_URL: http://dev.gateway.pic.mc-ops.tech/
        run: |
          # By default, GitHub Actions runs jobs in the GITHUB_WORKSPACE directory, which is /home/runner/work/<repo>/<repo>
          cd "$GITHUB_WORKSPACE"
          # Remove all .env files
          rm -rf .env
          rm -rf .env.*

          # Run icr-cli deploy (it will build and deploy all canisters) with 'default' user
          ~/.local/bin/icr-cli deploy -u default



      # - name: Setup pnpm cache
      #   uses: actions/cache@v4
      #   with:
      #     path: ${{ env.STORE_PATH }}
      #     key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
      #     restore-keys: |
      #       ${{ runner.os }}-pnpm-store-