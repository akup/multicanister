upstream wireguard_backend {
    # Round-robin between the two WireGuard clients
    server 10.0.0.2:80 max_fails=3 fail_timeout=30s;
    server 10.0.0.3:80 max_fails=3 fail_timeout=30s;
}

server {
    listen 80;
    server_name vault.dev.mc-ops.tech argo.dev.mc-ops.tech;
    
    # Logging
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;
    
    # Proxy settings
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    
    # Timeouts
    proxy_connect_timeout 30s;
    proxy_send_timeout 30s;
    proxy_read_timeout 30s;
    
    # Buffer settings
    proxy_buffering on;
    proxy_buffer_size 4k;
    proxy_buffers 8 4k;
    
    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
    
    # Main proxy location
    location / {
        # Set backend_host variable based on request host
        set $backend_host "";

        if ($host = "vault.dev.mc-ops.tech") {
            set $backend_host "test-app-backend";
        }
        
        if ($host = "argo.dev.mc-ops.tech") {
            set $backend_host "argocd";
        }

        # Use the variable for Host header
        proxy_set_header Host $backend_host;
        # Proxy to wireguard backend
        proxy_pass http://wireguard_backend;
        
        # Error handling
        proxy_intercept_errors on;
        error_page 502 503 504 = @fallback;
    }
    
    # Fallback location
    location @fallback {
        return 502 "Service temporarily unavailable";
        add_header Content-Type text/plain;
    }
}

# Default server block for unmatched hosts
server {
    listen 80 default_server;
    server_name _;
    
    # Return 404 for any unmatched hostnames
    return 404 "Host not found\n";
    add_header Content-Type text/plain;
}